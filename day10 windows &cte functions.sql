# get each country ,category &  top 1 sum(sales) from superstore
# get each country ,category , sub category & top 1 sum(sales) from superstore
# get each country ,category &  top 3 having  sum(sales) >10000 from superstore

use novermber_24;
select country ,category,total_sales from (
select country ,category ,sum(sales)total_sales,
rank() over (partition by country order by sum(sales)desc)rnk
from superstore
group by country,category)vk
where rnk = 1;

# get each country ,category , sub category & top 1 sum(sales) from superstore
select * from(
select country ,category , sub_category , sum(sales)total_sales,
rank () over(partition by country ,category order by sum(sales) desc) rnk
from superstore
group by country,category,sub_category)vk
where rnk =1;

# get each country ,category &  top 3 having  sum(sales) >10000 from superstore
select  distinct  country ,category from superstore;

select * from(
select country,category,sum(sales)total_sales,
dense_rank () over (partition by country order by sum(sales)desc) rnk
from superstore
group by country, category
having total_sales >10000 order by country)vk
where rnk =3; 

#year wise toatl sales

select  year(order_date) year , sum(sales)sales from superstore
group by 1 order by 1;

#lag function is use to get previous sales -1 conditions

select  year(order_date)year , sum(sales) currentyear ,
lag(sum(sales)) over(order by year (order_date)asc) py
from superstore
group by 1;

# difference
select *,(pysales- cysales) diff,
concat(round((cysales/pysales)*100,2),"%")   "% of difference"
 from(
select year (order_date)year, sum(sales)cysales,
lag(sum(sales)) over (order by year(order_date)asc) pysales
from superstore
group  by 1)vk;

# growth %

select *,(pysales- cysales) diff,
concat(round(((cysales-pysales)/pysales)*100,2),"%")   "year to year  %"
 from(
select year (order_date)year, sum(sales)cysales,
lag(sum(sales)) over (order by year(order_date)asc) pysales
from superstore
group  by 1)vk;

#lead to get the next values
select year (order_date)year,sum(sales)cyslaes,
lag(sum(sales)) over (order by year (order_date)asc)py_sales,
lead(sum(sales)) over (order by year (order_date)asc)next_sales
from superstore
group by year;

select region ,sum(sales) totalsales from superstore
group by region;

select *,sum(total) over() grandtotal from(
select region,sum(sales) total from superstore
group by region)vk; # vk means we can put any thing in that 

select *, concat(round((total/grandtotal)*100,2),"%") "region %" from(
select *,sum(total) over () grandtotal 
from(
select region ,sum(sales) total from superstore
group by region)vk)vkk; 

# cte common table expression (with)

select country,sales,dense_rank() over (order by sales  desc)
as rnk from superstore;

with vkk as(
select country ,sales ,dense_rank() over (order by sales desc )as rnk
from superstore)
select * from vkk where rnk =3;




# employee for each department  who holds rank 2,3, and 5
# employee id , first _name, department , salary
with emp as(
select  emp_id,first_name ,last_name,dep_id ,salary,
dense_rank () over (partition by dep_id order by salary desc) RNK
from myemp)
select * from emp where rnk in (2,3,5);



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































